import { Resend } from 'resend';

const resend = new Resend(process.env.RESEND_API_KEY);

interface NotificationData {
  type: 'toy_request' | 'early_gift' | 'friend_gift' | 'special_request' | 'admin_action';
  title: string;
  description: string;
  childName?: string;
  parentEmail?: string;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  actionUrl?: string;
  metadata?: Record<string, any>;
}

const TEAM_EMAIL = 'teamvcorp@thevacorp.com';

export async function sendAdminNotification(data: NotificationData) {
  try {
    const priorityEmoji = {
      low: 'üîµ',
      medium: 'üü°', 
      high: 'üü†',
      urgent: 'üî¥'
    };

    const typeEmoji = {
      toy_request: 'üéÅ',
      early_gift: '‚≠ê',
      friend_gift: 'üíù',
      special_request: 'üéÖ',
      admin_action: '‚öôÔ∏è'
    };

    const subject = `${priorityEmoji[data.priority]} ${typeEmoji[data.type]} Spirit of Santa: ${data.title}`;
    
    const htmlContent = `
<!DOCTYPE html>
<html>
<head>
  <style>
    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
    .container { max-width: 600px; margin: 0 auto; padding: 20px; }
    .header { background: linear-gradient(135deg, #ea1938, #22c55e); color: white; padding: 20px; border-radius: 8px 8px 0 0; text-align: center; }
    .content { background: #f9f9f9; padding: 20px; border-radius: 0 0 8px 8px; }
    .priority-badge { 
      display: inline-block; 
      padding: 4px 12px; 
      border-radius: 20px; 
      font-size: 12px; 
      font-weight: bold; 
      text-transform: uppercase;
      color: white;
      margin-bottom: 15px;
    }
    .priority-low { background: #3b82f6; }
    .priority-medium { background: #f59e0b; }
    .priority-high { background: #f97316; }
    .priority-urgent { background: #ef4444; }
    .action-button { 
      display: inline-block; 
      background: #ea1938; 
      color: white; 
      padding: 12px 24px; 
      text-decoration: none; 
      border-radius: 6px; 
      margin-top: 15px;
    }
    .metadata { background: white; padding: 15px; border-radius: 6px; margin-top: 15px; }
    .metadata h4 { margin: 0 0 10px 0; color: #ea1938; }
    .metadata p { margin: 5px 0; }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>${typeEmoji[data.type]} Spirit of Santa Admin Alert</h1>
    </div>
    <div class="content">
      <div class="priority-badge priority-${data.priority}">
        ${priorityEmoji[data.priority]} ${data.priority.toUpperCase()} PRIORITY
      </div>
      
      <h2>${data.title}</h2>
      <p>${data.description}</p>
      
      ${data.childName ? `<p><strong>Child:</strong> ${data.childName}</p>` : ''}
      ${data.parentEmail ? `<p><strong>Parent Email:</strong> ${data.parentEmail}</p>` : ''}
      
      ${data.actionUrl ? `
        <a href="${data.actionUrl}" class="action-button">
          üîß Take Action
        </a>
      ` : ''}
      
      ${data.metadata ? `
        <div class="metadata">
          <h4>üìã Additional Details</h4>
          ${Object.entries(data.metadata).map(([key, value]) => 
            `<p><strong>${key}:</strong> ${value}</p>`
          ).join('')}
        </div>
      ` : ''}
      
      <hr style="margin: 20px 0; border: none; border-top: 1px solid #ddd;">
      <p style="font-size: 12px; color: #666;">
        üéÖ This notification was automatically generated by the Spirit of Santa platform.<br>
        Time: ${new Date().toLocaleString()}<br>
        Environment: ${process.env.NODE_ENV || 'development'}
      </p>
    </div>
  </div>
</body>
</html>
    `;

    const textContent = `
üéÖ SPIRIT OF SANTA ADMIN NOTIFICATION üéÖ

Priority: ${data.priority.toUpperCase()} ${priorityEmoji[data.priority]}
Type: ${data.type.replace('_', ' ').toUpperCase()} ${typeEmoji[data.type]}

${data.title}

${data.description}

${data.childName ? `Child: ${data.childName}` : ''}
${data.parentEmail ? `Parent Email: ${data.parentEmail}` : ''}

${data.actionUrl ? `Action URL: ${data.actionUrl}` : ''}

${data.metadata ? 
  'Additional Details:\n' + 
  Object.entries(data.metadata).map(([key, value]) => `${key}: ${value}`).join('\n')
  : ''
}

---
Generated: ${new Date().toLocaleString()}
Environment: ${process.env.NODE_ENV || 'development'}
    `;

    const result = await resend.emails.send({
      from: process.env.RESEND_FROM_EMAIL!,
      to: [TEAM_EMAIL],
      subject,
      html: htmlContent,
      text: textContent,
    });

    console.log('üìß Admin notification sent:', {
      type: data.type,
      priority: data.priority,
      title: data.title,
      emailId: result.data?.id
    });

    return { success: true, emailId: result.data?.id };

  } catch (error) {
    console.error('‚ùå Failed to send admin notification:', error);
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
  }
}

// Convenience functions for specific notification types
export async function notifyToyRequest(childName: string, itemTitle: string, parentEmail: string, requestId: string) {
  return sendAdminNotification({
    type: 'toy_request',
    title: `New Toy Request: ${itemTitle}`,
    description: `${childName} has requested a new toy item that needs to be added to the catalog.`,
    childName,
    parentEmail,
    priority: 'medium',
    actionUrl: `${process.env.NEXTAUTH_URL}/admin/toy-requests`,
    metadata: {
      'Request ID': requestId,
      'Item Title': itemTitle,
      'Magic Points Used': '5'
    }
  });
}

export async function notifySpecialRequest(type: 'early_gift' | 'friend_gift', childName: string, giftTitle: string, parentEmail: string) {
  const typeLabel = type === 'early_gift' ? 'Early Gift' : 'Friend Gift';
  const emoji = type === 'early_gift' ? '‚≠ê' : 'üíù';
  
  return sendAdminNotification({
    type: 'special_request',
    title: `${emoji} New ${typeLabel} Request`,
    description: `${childName} has requested a ${typeLabel.toLowerCase()} that has been auto-approved and is ready for fulfillment.`,
    childName,
    parentEmail,
    priority: 'medium',
    actionUrl: `${process.env.NEXTAUTH_URL}/admin/logistics`,
    metadata: {
      'Request Type': typeLabel,
      'Gift': giftTitle,
      'Status': 'Auto-approved, ready for fulfillment'
    }
  });
}

export async function notifyNewUser(userName: string, userEmail: string, registrationMethod: 'google' | 'credentials' = 'google') {
  const methodEmoji = registrationMethod === 'google' ? 'üîó' : 'üìß';
  const methodLabel = registrationMethod === 'google' ? 'Google OAuth' : 'Email/Password';
  
  return sendAdminNotification({
    type: 'admin_action',
    title: `üëã New User Registration: ${userName}`,
    description: `A new user has registered for the Spirit of Santa platform using ${methodLabel}.`,
    priority: 'low',
    actionUrl: `${process.env.NEXTAUTH_URL}/admin`,
    metadata: {
      'User Name': userName,
      'Email': userEmail,
      'Registration Method': methodLabel,
      'Onboarded': 'No - Pending parent setup'
    }
  });
}

export async function notifyAdminAction(title: string, description: string, priority: 'low' | 'medium' | 'high' | 'urgent' = 'medium', metadata?: Record<string, any>) {
  return sendAdminNotification({
    type: 'admin_action',
    title,
    description,
    priority,
    actionUrl: `${process.env.NEXTAUTH_URL}/admin`,
    metadata
  });
}